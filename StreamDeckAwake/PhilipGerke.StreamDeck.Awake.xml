<?xml version="1.0"?>
<doc>
    <assembly>
        <name>com.philipgerke.awake</name>
    </assembly>
    <members>
        <member name="T:PhilipGerke.StreamDeck.Awake.AwakeFile">
            <summary>
                The serialization class for the persisted awake settings.
            </summary>
        </member>
        <member name="P:PhilipGerke.StreamDeck.Awake.AwakeFile.DisplayOn">
            <summary>
                Gets or sets whether the screens should be kept on or off while the machine is kept awake.
            </summary>
        </member>
        <member name="P:PhilipGerke.StreamDeck.Awake.AwakeFile.Ticks">
            <summary>
                Gets or sets the ticks representing the <see cref="T:System.DateTimeOffset"/> when the Awake timer expires in UTC.
            </summary>
        </member>
        <member name="T:PhilipGerke.StreamDeck.Awake.AwakePlugin">
            <summary>
                The Stream Deck Awake plugin.
            </summary>
        </member>
        <member name="P:PhilipGerke.StreamDeck.Awake.AwakePlugin.Settings">
            <summary>
                Gets or sets the plugin settings.
            </summary>
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakePlugin.#ctor(BarRaider.SdTools.ISDConnection,BarRaider.SdTools.InitialPayload)">
            <summary>
                Constructs a new <see cref="T:PhilipGerke.StreamDeck.Awake.AwakePlugin"/> instance.
            </summary>
            <param name="connection">The Stream Deck connection.</param>
            <param name="payload">The initial payload.</param>
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakePlugin.Dispose">
            <inheritdoc />
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakePlugin.KeyPressed(BarRaider.SdTools.KeyPayload)">
            <inheritdoc />
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakePlugin.KeyReleased(BarRaider.SdTools.KeyPayload)">
            <inheritdoc />
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakePlugin.OnTick">
            <inheritdoc />
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakePlugin.ReceivedGlobalSettings(BarRaider.SdTools.ReceivedGlobalSettingsPayload)">
            <inheritdoc />
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakePlugin.ReceivedSettings(BarRaider.SdTools.ReceivedSettingsPayload)">
            <inheritdoc />
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakePlugin.SetAwakeState(System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakePlugin.OnAwakeFailureOrCancelled">
            <inheritdoc />
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakePlugin.OnAwakeSuccess(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:PhilipGerke.StreamDeck.Awake.AwakeService">
            <summary>
                The Awake service.
            </summary>
            <remarks>
                This class allows talking to Win32 APIs without having to rely on PInvoke in other parts of the codebase.
            </remarks>
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakeService.GetInstance">
            <summary>
            Gets the singleton <see cref="T:PhilipGerke.StreamDeck.Awake.AwakeService"/> instance.
            </summary>
            <returns>The instance.</returns>
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakeService.SetAwakeState(System.Boolean)">
            <summary>
                Sets the computer awake state using the native Win32 SetThreadExecutionState API. This
                function is just a nice-to-have wrapper that helps avoid tracking the success or failure of
                the call.
            </summary>
            <param name="keepDisplayOn"><c>true</c>, if the display shall be kept on, <c>false</c> otherwise.</param>
            <returns><c>true</c>, if the state was set successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakeService.ClearPluginInstance">
            <summary>
                Disconnects the currently connected plugin instance from the service.
            </summary>
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakeService.SetPluginInstance(PhilipGerke.StreamDeck.Awake.IAwakePlugin)">
            <summary>
                Connects the specified plugin instance to the Awake service
            </summary>
            <remarks>An existing instance will be overridden.</remarks>
            <param name="instance">The <see cref="T:PhilipGerke.StreamDeck.Awake.IAwakePlugin"/> instance to be connected.</param>
        </member>
        <member name="P:PhilipGerke.StreamDeck.Awake.AwakeService.TimeRemaining">
            <summary>
                Gets or sets the remaining time on a timed Awake, or <c>null</c>, if no timer is enabled.
            </summary>
        </member>
        <member name="P:PhilipGerke.StreamDeck.Awake.AwakeService.IsEnabled">
            <summary>
                Gets whether or not the machine is currently being kept awake.
            </summary>
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakeService.#ctor">
            <summary>
                Constructs a new instance of the <see cref="T:PhilipGerke.StreamDeck.Awake.AwakeService"/>.
            </summary>
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakeService.StartAwakeIndefinite(System.Boolean)">
            <summary>
                Starts keeping the machine awake indefinitely
            </summary>
            <param name="keepDisplayOn"><c>true</c>, if the display shall be kept on, <c>false</c> otherwise.</param>
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakeService.StartAwakeTimed(System.UInt32,System.Boolean)">
            <summary>
                Starts keeping the machine awake for the specified number of seconds
            </summary>
            <param name="seconds">The number of seconds that the machine shall be kept awake.</param>
            <param name="keepDisplayOn"><c>true</c>, if the display shall be kept on, <c>false</c> otherwise.</param>
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.AwakeService.StopAwake(System.Boolean)">
            <summary>
                Stops keeping the machine awake.
            </summary>
            <param name="leaveAwakeFile">Determines if the Awake file shall be deleted.</param>
        </member>
        <member name="T:PhilipGerke.StreamDeck.Awake.ExecutionState">
            <summary>
                The execution state.
            </summary>
        </member>
        <member name="F:PhilipGerke.StreamDeck.Awake.ExecutionState.AwayModeRequired">
            <summary>
                Away mode required.
            </summary>
        </member>
        <member name="F:PhilipGerke.StreamDeck.Awake.ExecutionState.Continuous">
            <summary>
                Continuous
            </summary>
        </member>
        <member name="F:PhilipGerke.StreamDeck.Awake.ExecutionState.DisplayRequired">
            <summary>
                Display required.
            </summary>
        </member>
        <member name="F:PhilipGerke.StreamDeck.Awake.ExecutionState.SystemRequired">
            <summary>
                System required.
            </summary>
        </member>
        <member name="T:PhilipGerke.StreamDeck.Awake.IAwakePlugin">
            <summary>
                Defines the properties and methods of the Awake plugin.
            </summary>
        </member>
        <member name="P:PhilipGerke.StreamDeck.Awake.IAwakePlugin.Connection">
            <summary>
                Gets the connection to the Stream Deck.
            </summary>
        </member>
        <member name="P:PhilipGerke.StreamDeck.Awake.IAwakePlugin.Logger">
            <summary>
                Gets the Stream Deck tools logger instance.
            </summary>
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.IAwakePlugin.OnAwakeFailureOrCancelled">
            <summary>
                The callback action to be executed when the Awake process was cancelled or failed.
            </summary>
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.IAwakePlugin.OnAwakeSuccess(System.Boolean)">
            <summary>
                The callback action to be executed when the Awake process was completed normally.
            </summary>
            <param name="result">Determines if the process was completed successfully.</param>
        </member>
        <member name="M:PhilipGerke.StreamDeck.Awake.IAwakePlugin.SetAwakeState(System.Nullable{System.Boolean})">
            <summary>
                Sets the new Awake state.
            </summary>
            <param name="enabled"><c>true</c>, if Awake shall be enabled, <c>false</c> if it shall be disabled and <c>null</c>, if the new state is unknown.</param>
        </member>
        <member name="T:PhilipGerke.StreamDeck.Awake.Program">
            <summary>
                The entry point class.
            </summary>
        </member>
        <member name="T:PhilipGerke.StreamDeck.Awake.Settings">
            <summary>
                The settings for the Awake plugin.
            </summary>
        </member>
        <member name="P:PhilipGerke.StreamDeck.Awake.Settings.DisplayOn">
            <summary>
                Gets or sets whether the screens should be kept on or off while the machine is kept awake.
            </summary>
        </member>
        <member name="P:PhilipGerke.StreamDeck.Awake.Settings.TimeLimit">
            <summary>
                Gets or sets the duration, in seconds, during which Awake keeps the computer awake. Can be used in combination with <see cref="P:PhilipGerke.StreamDeck.Awake.Settings.DisplayOn"/>.
            </summary>
        </member>
    </members>
</doc>
